set(DEFAULT_CMAKE_ASM_FLAGS 	${CMAKE_ASM_FLAGS})
set(DEFAULT_CMAKE_C_FLAGS 	${CMAKE_C_FLAGS} -Werror=return-type)
set(DEFAULT_CMAKE_CXX_FLAGS 	${CMAKE_CXX_FLAGS} -Werror=return-type)

set(DEFAULT_CMAKE_STATIC_LIBRARY_PREFIX 	${CMAKE_STATIC_LIBRARY_PREFIX})
set(DEFAULT_CMAKE_STATIC_LIBRARY_SUFFIX 	${CMAKE_STATIC_LIBRARY_SUFFIX})
set(DEFAULT_CMAKE_EXECUTABLE_SUFFIX 	 	${CMAKE_EXECUTABLE_SUFFIX})

# Function to switch between building kernel and user mode binaries.
function(switch_mode MODE)
	string(TOUPPER ${MODE} MODE)
	if (MODE STREQUAL KERNEL)
		# Set compiler flags for kernel code
		set(CMAKE_ASM_FLAGS "${DEFAULT_CMAKE_ASM_FLAGS} -x assembler-with-cpp")
		set(COMMON_C_CXX_FLAGS "-no-pie -fno-pic -fno-ident -ffreestanding -fno-exceptions -nostdlib -nostdinc -fno-stack-protector -nostartfiles")

		set(CMAKE_C_FLAGS   "${DEFAULT_CMAKE_C_FLAGS} ${COMMON_C_CXX_FLAGS}")
		set(CMAKE_CXX_FLAGS "${DEFAULT_CMAKE_CXX_FLAGS} ${COMMON_C_CXX_FLAGS} -fno-rtti")

		set(CMAKE_STATIC_LIBRARY_PREFIX "")
		set(CMAKE_STATIC_LIBRARY_SUFFIX ".elf")
		set(CMAKE_EXECUTABLE_SUFFIX 	"")
	elseif (MODE STREQUAL USER)
		# Reset compiler flags for user mode applications
		set(CMAKE_ASM_FLAGS 	${DEFAULT_CMAKE_ASM_FLAGS})
		set(CMAKE_C_FLAGS 	${DEFAULT_CMAKE_C_FLAGS})
		set(CMAKE_CXX_FLAGS 	${DEFAULT_CMAKE_CXX_FLAGS})

		set(CMAKE_STATIC_LIBRARY_PREFIX ${DEFAULT_CMAKE_STATIC_LIBRARY_PREFIX})
		set(CMAKE_STATIC_LIBRARY_SUFFIX ${DEFAULT_CMAKE_STATIC_LIBRARY_SUFFIX})
		set(CMAKE_EXECUTABLE_SUFFIX 	${DEFAULT_CMAKE_EXECUTABLE_SUFFIX})
	else ()
		message(SEND_ERROR "switch_mode: unknown mode '${MODE}'")
	endif()

	set(CMAKE_ASM_FLAGS ${CMAKE_ASM_FLAGS} 	PARENT_SCOPE)
	set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} 	PARENT_SCOPE)
	set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} 	PARENT_SCOPE)

	set(CMAKE_STATIC_LIBRARY_PREFIX ${CMAKE_STATIC_LIBRARY_PREFIX} PARENT_SCOPE)
	set(CMAKE_STATIC_LIBRARY_SUFFIX ${CMAKE_STATIC_LIBRARY_SUFFIX} PARENT_SCOPE)
	set(CMAKE_EXECUTABLE_SUFFIX 	${CMAKE_EXECUTABLE_SUFFIX} PARENT_SCOPE)
endfunction(switch_mode MODE)
