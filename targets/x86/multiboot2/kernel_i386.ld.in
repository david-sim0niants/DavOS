#include <ld/ldsym.h>
#include <config.h>

ENTRY(_start)

SECTIONS
{
	. = 1M;
	SET_HOLE(0)

	__kernel_image_start_lma = .;
	__kernel_image_start_vma = .;

	DEFINE_SECTION (
		i386_text,
		.multiboot2_header :
		{
			KEEP(*(.multiboot2_header))
		}

		. += 1; /* Avoiding some stupid bug in linker or something I don't understand.
			 Without this .multiboot2_header and .text sections appear to start
			 at the same address besides they are both non-empty sections. */

		.text : ALIGN(16)
		{
			*(.text_entry)
			*(.text)
			*(.text.*)
		}
	)

	DEFINE_SECTION (
		i386_rodata,
		.rodata : ALIGN(4K)
		{
			*(.rodata)
			*(.rodata.*)
		}
	)

	DEFINE_SECTION (
		i386_data,
		.data : ALIGN(4K)
		{
			*(.data)
		}
	)

	DEFINE_SECTION (
		ldsym,
		.ldsym : ALIGN(4K)
		{
			DEFINE_LDSYM(kernel_stack_top)
			DEFINE_LDSYM(kernel_image_start_vma)
			DEFINE_LDSYM(kernel_image_start_lma)
			DEFINE_LDSYM(kernel_image_end_vma)
			DEFINE_LDSYM(kernel_image_end_lma)

			DEFINE_SECTION_LDSYMS(i386_text)
			DEFINE_SECTION_LDSYMS(i386_rodata)
			DEFINE_SECTION_LDSYMS(i386_data)
			DEFINE_SECTION_LDSYMS(ldsym)
			DEFINE_SECTION_LDSYMS(stack)

#if CONFIG_ARCH == ARCH_x86_64
			DEFINE_SECTION_LDSYMS_NULL(x86_64_text)
			DEFINE_SECTION_LDSYMS_NULL(x86_64_rodata)
			DEFINE_SECTION_LDSYMS_NULL(x86_64_data)

			DEFINE_LDSYM_CUSTOM(kernel_x86_64_entry, __fake_entry)
#endif

			DEFINE_SECTION_LDSYMS_NULL(text)
			DEFINE_SECTION_LDSYMS_NULL(bss)
			DEFINE_SECTION_LDSYMS_NULL(rodata)
			DEFINE_SECTION_LDSYMS_NULL(data)
			DEFINE_SECTION_LDSYMS_NULL(init_array)

			DEFINE_LDSYM_CUSTOM(kernel_main, __fake_entry)
		}
	)

	DEFINE_SECTION (
		stack,
		.stack BLOCK(CONFIG_STACK_SIZE) (NOLOAD) : ALIGN(4K)
		{
			. += CONFIG_STACK_SIZE;
		}
	)

	PROVIDE(__kernel_stack_top = .);

	PROVIDE(__fake_entry = .);
	.fake_entry :
	{
		KEEP(*(.fake_entry))
	}
	PROVIDE(__fake_entry_size = . - __fake_entry);

	__kernel_image_end_vma = .;
	__kernel_image_end_lma = .;

	/DISCARD/ :
	{
		*(.bss) /* .bss won't be used in i386-specific code. */
		*(.note.*)
		*(.comment)
		*(.eh_frame)
	}
}
