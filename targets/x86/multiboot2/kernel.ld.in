#include <ld/ldsym.h>
#include <config.h>

ENTRY(_start)

SECTIONS
{
	. = 1M;

	.i386.text : ALIGN(4K)
	{
		KEEP(*(.i386.text))
	}

	_start = ADDR(.i386.text);

	.i386.rodata : ALIGN(4K)
	{
		KEEP(*(.i386.rodata))
	}

	.ldsym : ALIGN(4K)
	{
		DEFINE_LDSYM(stack_top, 		__STACK_TOP)
		DEFINE_LDSYM(kernel_image_end_vma, 	__KERNEL_IMAGE_END_VMA)
		DEFINE_LDSYM(kernel_image_end_lma, 	__KERNEL_IMAGE_END_LMA)

		DEFINE_LDSYM(kernel_text_start_vma, 	__KERNEL_TEXT_START_VMA)
		DEFINE_LDSYM(kernel_text_start_lma, 	__KERNEL_TEXT_START_LMA)
		DEFINE_LDSYM(kernel_text_size, 		__KERNEL_TEXT_SIZE)

		DEFINE_LDSYM(kernel_bss_start_vma, 	__KERNEL_BSS_START_VMA)
		DEFINE_LDSYM(kernel_bss_start_lma, 	__KERNEL_BSS_START_LMA)
		DEFINE_LDSYM(kernel_bss_size, 		__KERNEL_BSS_SIZE)

		DEFINE_LDSYM(kernel_rodata_start_vma, 	__KERNEL_RODATA_START_VMA)
		DEFINE_LDSYM(kernel_rodata_start_lma, 	__KERNEL_RODATA_START_LMA)
		DEFINE_LDSYM(kernel_rodata_size, 	__KERNEL_RODATA_SIZE)

		DEFINE_LDSYM(kernel_data_start_vma, 	__KERNEL_DATA_START_VMA)
		DEFINE_LDSYM(kernel_data_start_lma, 	__KERNEL_DATA_START_LMA)
		DEFINE_LDSYM(kernel_data_size, 		__KERNEL_DATA_SIZE)

		DEFINE_LDSYM(kernel_main, 		main)
	}

	.i386.data : ALIGN(4K)
	{
		KEEP(*(.i386.data))
	}

	.stack BLOCK(CONFIG_STACK_SIZE) (NOLOAD) : ALIGN(4K)
	{
		. += CONFIG_STACK_SIZE;
	}

	. = ALIGN(4K);
	__STACK_TOP = .;

	PROVIDE(__TOT_HOLE_SIZE = 0);
	__KERNEL_TEXT_START_LMA = .;

#if CONFIG_ARCH == ARCH_x86_64
	#define KERNEL_TEXT_START_VMA 0xFFFFFFFF80000000
#else
	#define KERNEL_TEXT_START_VMA VM_SPLIT
#endif
	__KERNEL_TEXT_START_VMA = KERNEL_TEXT_START_VMA;

	__TOT_HOLE_SIZE += __KERNEL_TEXT_START_VMA - .;

	. = __KERNEL_TEXT_START_VMA;

	.text : AT(__KERNEL_TEXT_START_LMA)
	{
		KEEP(*(.text))
		KEEP(*(.text.*))
	}

	. = ALIGN(4K);
	__KERNEL_TEXT_SIZE = . - __KERNEL_TEXT_START_VMA;
	__KERNEL_RODATA_START_VMA = .;
	__KERNEL_RODATA_START_LMA = . - __TOT_HOLE_SIZE;

	.rodata : AT(__KERNEL_RODATA_START_LMA)
	{
		KEEP(*(.rodata))
		KEEP(*(.rodata.*))
	}

	. = ALIGN(4K);
	__KERNEL_RODATA_SIZE = . - __KERNEL_RODATA_START_VMA;
	__KERNEL_DATA_START_VMA = .;
	__KERNEL_DATA_START_LMA = . - __TOT_HOLE_SIZE;

	.data : AT(__KERNEL_DATA_START_LMA)
	{
		KEEP(*(.data))
		KEEP(*(.data.*))
	}

	. = ALIGN(4K);
	__KERNEL_DATA_SIZE = . - __KERNEL_DATA_START_VMA;
	__KERNEL_BSS_START_VMA = .;
	__KERNEL_BSS_START_LMA = . - __TOT_HOLE_SIZE;

	.bss (NOLOAD) : AT(__KERNEL_DATA_START_LMA)
	{
		KEEP(*(.bss))
	}

	. = ALIGN(4K);
	__KERNEL_BSS_SIZE = . - __KERNEL_BSS_START_VMA;
	__KERNEL_IMAGE_END_VMA = .;
	__KERNEL_IMAGE_END_LMA = . - __TOT_HOLE_SIZE;

	/DISCARD/ :
	{
		*(.note.gnu.property)
		*(.comment)
		*(.eh_frame)
	}
}
