#include <ld/ldsym.h>
#include <config.h>

ENTRY(_start)

SECTIONS
{
	. = 1M;
	SET_HOLE(0)

	__kernel_image_start_lma = .;
	__kernel_image_start_vma = .;

	DEFINE_SECTION (
		i386_text,

		.i386.multiboot2_header :
		{
			KEEP(*(.i386.multiboot2_header))
		}

		_start = ADDR(.i386.text);
		.i386.text : ALIGN(16)
		{
			KEEP(*(.i386.text))
		}
	)

	DEFINE_SECTION (
		i386_rodata,
		.i386.rodata : ALIGN(4K)
		{
			KEEP(*(.i386.rodata))
		}
	)

	DEFINE_SECTION (
		i386_data,
		.i386.data : ALIGN(4K)
		{
			KEEP(*(.i386.data))
		}
	)

	DEFINE_SECTION (
		ldsym,
		.ldsym : ALIGN(4K)
		{
			DEFINE_LDSYM(kernel_stack_top)
			DEFINE_LDSYM(kernel_image_start_vma)
			DEFINE_LDSYM(kernel_image_start_lma)
			DEFINE_LDSYM(kernel_image_end_vma)
			DEFINE_LDSYM(kernel_image_end_lma)

			DEFINE_SECTION_LDSYMS(i386_text)
			DEFINE_SECTION_LDSYMS(i386_rodata)
			DEFINE_SECTION_LDSYMS(i386_data)
			DEFINE_SECTION_LDSYMS(ldsym)
			DEFINE_SECTION_LDSYMS(stack)

#if CONFIG_ARCH == ARCH_x86_64
			DEFINE_SECTION_LDSYMS(x86_64_text)
			DEFINE_SECTION_LDSYMS(x86_64_rodata)
			DEFINE_SECTION_LDSYMS(x86_64_data)

			DEFINE_LDSYM_CUSTOM(kernel_x86_64_entry, _x86_64_entry)
#endif

			DEFINE_SECTION_LDSYMS(text)
			DEFINE_SECTION_LDSYMS(bss)
			DEFINE_SECTION_LDSYMS(rodata)
			DEFINE_SECTION_LDSYMS(data)
			DEFINE_SECTION_LDSYMS(init_array)

			DEFINE_LDSYM_CUSTOM(kernel_main, main)
		}
	)

#if CONFIG_ARCH == ARCH_x86_64
	DEFINE_SECTION (
		x86_64_text,
		.x86_64.text : ALIGN(4K)
		{
			KEEP(*(.x86_64.text))
		}
	)

	DEFINE_SECTION (
		x86_64_rodata,
		.x86_64.rodata : ALIGN(4K)
		{
			KEEP(*(.x86_64.rodata))
		}
	)

	DEFINE_SECTION (
		x86_64_data,
		.x86_64.data : ALIGN(4K)
		{
			KEEP(*(.x86_64.data))
		}
	)
#endif

	DEFINE_SECTION (
		stack,
		.stack BLOCK(CONFIG_STACK_SIZE) (NOLOAD) : ALIGN(4K)
		{
			. += CONFIG_STACK_SIZE;
		}
	)

	__kernel_stack_top = .;

	SECTION_LMA(text) = .;

#if CONFIG_ARCH == ARCH_x86_64
	#define KERNEL_TEXT_START_VMA 0xFFFFFFFF80000000
#else
	#define KERNEL_TEXT_START_VMA VM_SPLIT
#endif
	SECTION_VMA(text) = KERNEL_TEXT_START_VMA;

	ADD_HOLE(SECTION_VMA(text) - .)
	. = SECTION_VMA(text);

	DEFINE_SECTION (
		text,
		.text : AT(SECTION_LMA(text))
		{
			KEEP(*(.text))
			KEEP(*(.text.*))
		}
	)

	DEFINE_SECTION (
		rodata,
		.rodata : AT(SECTION_LMA(rodata))
		{
			KEEP(*(.rodata))
			KEEP(*(.rodata.*))
		}
	)

	DEFINE_SECTION (
		data,
		.data : AT(SECTION_LMA(data))
		{
			KEEP(*(.data))
			KEEP(*(.data.*))
		}
	)

	DEFINE_SECTION (
		bss,
		.bss (NOLOAD) : AT(SECTION_LMA(bss))
		{
			KEEP(*(.bss))
			KEEP(*(.bss.*))
		}
	)

	DEFINE_SECTION(
		init_array,
		.init_array : AT(SECTION_LMA(init_array))
		{
			KEEP(*(.init_array))
		}
		PROVIDE(__kernel_init_array_unaligned_size = . - SECTION_VMA(init_array));
	)

	__kernel_image_end_vma = .;
	__kernel_image_end_lma = . - __tot_hole_size;

	/DISCARD/ :
	{
		*(.note.gnu.property)
		*(.comment)
		*(.eh_frame)
	}
}
