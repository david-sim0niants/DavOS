#include <ld/ldsym.h>
#include <config.h>

ENTRY(_start)

SECTIONS
{
	. = 1M;
	SET_HOLE(0)

	__KERNEL_IMAGE_START_LMA = .;
	__KERNEL_IMAGE_START_VMA = .;

	DEFINE_SECTION (
		I386_TEXT,

		.i386.multiboot2_header :
		{
			KEEP(*(.i386.multiboot2_header))
		}

		_start = ADDR(.i386.text);
		.i386.text : ALIGN(16)
		{
			KEEP(*(.i386.text))
		}
	)

	DEFINE_SECTION (
		I386_RODATA,
		.i386.rodata : ALIGN(4K)
		{
			KEEP(*(.i386.rodata))
		}
	)

	DEFINE_SECTION (
		I386_DATA,
		.i386.data : ALIGN(4K)
		{
			KEEP(*(.i386.data))
		}
	)

	DEFINE_SECTION (
		LDSYM,
		.ldsym : ALIGN(4K)
		{
			DEFINE_LDSYM(stack_top, 		__STACK_TOP)
			DEFINE_LDSYM(kernel_image_start_vma, 	__KERNEL_IMAGE_START_VMA)
			DEFINE_LDSYM(kernel_image_start_lma, 	__KERNEL_IMAGE_START_LMA)
			DEFINE_LDSYM(kernel_image_end_vma, 	__KERNEL_IMAGE_END_VMA)
			DEFINE_LDSYM(kernel_image_end_lma, 	__KERNEL_IMAGE_END_LMA)

			DEFINE_LDSYM(kernel_i386_text_start_vma,SECTION_START_VMA(I386_TEXT))
			DEFINE_LDSYM(kernel_i386_text_start_lma,SECTION_START_LMA(I386_TEXT))
			DEFINE_LDSYM(kernel_i386_text_size, 	SECTION_SIZE(I386_TEXT))

			DEFINE_LDSYM(kernel_i386_rodata_start_vma, 	SECTION_START_VMA(I386_RODATA))
			DEFINE_LDSYM(kernel_i386_rodata_start_lma, 	SECTION_START_LMA(I386_RODATA))
			DEFINE_LDSYM(kernel_i386_rodata_size, 	SECTION_SIZE(I386_RODATA))

			DEFINE_LDSYM(kernel_i386_data_start_vma,SECTION_START_VMA(I386_DATA))
			DEFINE_LDSYM(kernel_i386_data_start_lma,SECTION_START_LMA(I386_DATA))
			DEFINE_LDSYM(kernel_i386_data_size, 	SECTION_SIZE(I386_DATA))

			DEFINE_LDSYM(kernel_ldsym_start_vma, 	SECTION_START_VMA(LDSYM))
			DEFINE_LDSYM(kernel_ldsym_start_lma, 	SECTION_START_LMA(LDSYM))
			DEFINE_LDSYM(kernel_ldsym_size, 	SECTION_SIZE(LDSYM))

			DEFINE_LDSYM(kernel_stack_start_vma, 	SECTION_START_VMA(STACK))
			DEFINE_LDSYM(kernel_stack_start_lma, 	SECTION_START_LMA(STACK))
			DEFINE_LDSYM(kernel_stack_size, 	SECTION_SIZE(STACK))

#if CONFIG_ARCH == ARCH_x86_64
			DEFINE_LDSYM(kernel_x86_64_text_start_vma, 	SECTION_START_VMA(x86_64_TEXT))
			DEFINE_LDSYM(kernel_x86_64_text_start_lma, 	SECTION_START_LMA(x86_64_TEXT))
			DEFINE_LDSYM(kernel_x86_64_text_size, 		SECTION_SIZE(x86_64_TEXT))

			DEFINE_LDSYM(kernel_x86_64_rodata_start_vma, 	SECTION_START_VMA(x86_64_RODATA))
			DEFINE_LDSYM(kernel_x86_64_rodata_start_lma, 	SECTION_START_LMA(x86_64_RODATA))
			DEFINE_LDSYM(kernel_x86_64_rodata_size, 	SECTION_SIZE(x86_64_RODATA))

			DEFINE_LDSYM(kernel_x86_64_data_start_vma, 	SECTION_START_VMA(x86_64_DATA))
			DEFINE_LDSYM(kernel_x86_64_data_start_lma, 	SECTION_START_LMA(x86_64_DATA))
			DEFINE_LDSYM(kernel_x86_64_data_size, 		SECTION_SIZE(x86_64_DATA))

			DEFINE_LDSYM(kernel_x86_64_entry, 		_x86_64_entry)
#endif

			DEFINE_LDSYM(kernel_text_start_vma, 	SECTION_START_VMA(TEXT))
			DEFINE_LDSYM(kernel_text_start_lma, 	SECTION_START_LMA(TEXT))
			DEFINE_LDSYM(kernel_text_size, 		SECTION_SIZE(TEXT))

			DEFINE_LDSYM(kernel_bss_start_vma, 	SECTION_START_VMA(BSS))
			DEFINE_LDSYM(kernel_bss_start_lma, 	SECTION_START_LMA(BSS))
			DEFINE_LDSYM(kernel_bss_size, 		SECTION_SIZE(BSS))

			DEFINE_LDSYM(kernel_rodata_start_vma, 	SECTION_START_VMA(RODATA))
			DEFINE_LDSYM(kernel_rodata_start_lma, 	SECTION_START_LMA(RODATA))
			DEFINE_LDSYM(kernel_rodata_size, 	SECTION_SIZE(RODATA))

			DEFINE_LDSYM(kernel_data_start_vma, 	SECTION_START_VMA(DATA))
			DEFINE_LDSYM(kernel_data_start_lma, 	SECTION_START_LMA(DATA))
			DEFINE_LDSYM(kernel_data_size, 		SECTION_SIZE(DATA))

			DEFINE_LDSYM(kernel_main, 		main)
		}
	)

#if CONFIG_ARCH == ARCH_x86_64
	DEFINE_SECTION (
		x86_64_TEXT,
		.x86_64.text : ALIGN(4K)
		{
			KEEP(*(.x86_64.text))
		}
	)

	DEFINE_SECTION (
		x86_64_RODATA,
		.x86_64.rodata : ALIGN(4K)
		{
			KEEP(*(.x86_64.rodata))
		}
	)

	DEFINE_SECTION (
		x86_64_DATA,
		.x86_64.data : ALIGN(4K)
		{
			KEEP(*(.x86_64.data))
		}
	)
#endif

	DEFINE_SECTION (
		STACK,
		.stack BLOCK(CONFIG_STACK_SIZE) (NOLOAD) : ALIGN(4K)
		{
			. += CONFIG_STACK_SIZE;
		}
	)

	__STACK_TOP = .;

	SECTION_START_LMA(TEXT) = .;

#if CONFIG_ARCH == ARCH_x86_64
	#define KERNEL_TEXT_START_VMA 0xFFFFFFFF80000000
#else
	#define KERNEL_TEXT_START_VMA VM_SPLIT
#endif
	SECTION_START_VMA(TEXT) = KERNEL_TEXT_START_VMA;

	ADD_HOLE(SECTION_START_VMA(TEXT) - .)
	. = SECTION_START_VMA(TEXT);

	DEFINE_SECTION (
		TEXT,
		.text : AT(SECTION_START_LMA(TEXT))
		{
			KEEP(*(.text))
			KEEP(*(.text.*))
		}
	)

	DEFINE_SECTION (
		RODATA,
		.rodata : AT(SECTION_START_LMA(RODATA))
		{
			KEEP(*(.rodata))
			KEEP(*(.rodata.*))
		}
	)

	DEFINE_SECTION (
		DATA,
		.data : AT(SECTION_START_LMA(DATA))
		{
			KEEP(*(.data))
			KEEP(*(.data.*))
		}
	)

	DEFINE_SECTION (
		BSS,
		.bss (NOLOAD) : AT(SECTION_START_LMA(BSS))
		{
			KEEP(*(.bss))
		}
	)

	__KERNEL_IMAGE_END_VMA = .;
	__KERNEL_IMAGE_END_LMA = . - __TOT_HOLE_SIZE;

	/DISCARD/ :
	{
		*(.note.gnu.property)
		*(.comment)
		*(.eh_frame)
	}
}
